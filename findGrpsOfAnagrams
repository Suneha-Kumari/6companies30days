Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.


Example 1:

Input:
N = 5
words[] = {act,god,cat,dog,tac}
Output: 
god dog
act cat tac
Explanation:
There are 2 groups of
anagrams "god", "dog" make group 1.
"act", "cat", "tac" make group 2.
Example 2:

Input:
N = 3
words[] = {no,on,is}
Output: 
no on
is
Explanation:
There are 2 groups of
anagrams "no", "on" make group 1.
"is" makes group 2. 


Solution:
vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
        map<string,vector<string>> mp;
        for(int i=0;i<string_list.size();i++){
            string word=string_list[i];
            sort(word.begin(),word.end());
            mp[word].push_back(string_list[i]);
        }
        vector<vector<string>> res;
        for(auto it:mp){
            vector<string> grps;
            for(auto y:it.second){
                grps.push_back(y);
            }
            res.push_back(grps);
        }
        return res;
    }
